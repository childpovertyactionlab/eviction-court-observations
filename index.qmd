---
page-title: "Dallas Court Observation Project"
display-title: ' ' 
editor: 
  markdown: 
    wrap: 72
---

```{r, Data Inputs}
#| include: FALSE
library(cpaltemplates)
library(tidycensus)
library(tidyverse)
library(rio)
library(sf)
library(googlesheets4)
library(DT)
library(grid)
library(gridExtra)
library(highcharter)
library(dplyr)

libDB <- '/Users/anushachowdhury/CPAL Dropbox/'
libGH <- '/Users/anushachowdhury/Documents/GitHub/'

courtobs <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1O9P06SgvZ_nRGc64W2OsSjyX9iCS_LkcsG9087HNTuk",
                       sheet = "Form Responses 1") %>%
  janitor::clean_names(.) %>%
  rename("timeStamp"="timestamp",
         "observer"="observer",
         "observationDate"="date_of_observation",
         "jpCourt"="justice_of_the_peace_court",
         "docketStart"="docket_start_time_please_indicate_what_time_the_judge_called_the_first_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_09_32_am",
         "docketEnd"="docket_end_time_please_indicate_the_time_the_judge_finished_hearing_the_last_case_on_the_docket_use_format_hh_mm_and_specify_am_or_pm_e_g_12_34_pm",
         "caseNumber"="case_number",
         "caseType"="is_this_a_commercial_or_residential_eviction_case",
         "plaintiffName"="plaintiff_landlord_name",
         "plaintiffDesignee"="did_the_plaintiff_landlord_or_their_designee_like_a_property_manager_appear",
         "plaintiffRep"="did_the_plaintiff_landlord_have_additional_representation_of_some_kind",
         "defName"="defendant_tenant_name",
         "defAppear"="did_the_defendant_tenant_appear",
         "defRep"="did_the_defendant_tenant_have_additional_representation_of_some_kind",
         "evicReason"="reason_for_eviction_select_multiple_if_applicable",
         "totalOwned"="total_amount_owed_please_indicate_the_total_amount_that_the_judge_or_landlord_states_is_owed_include_the_sum_of_rent_or_damages_owed_plus_court_costs_use_format_xxxx_xx_for_example_1234_50",
         "noticeVacate"="was_there_any_discussion_about_the_notice_to_vacate_ntv",
         "noticeConfirm"="if_yes_did_the_judge_confirm_the_ntv",
         "jpRuled"="the_jp_ruled_in_favor_of",
         "outcomeOther"="if_you_selected_other_please_specify_the_outcome_of_the_case_below",
         "otherNotes"="additional_case_notes"
  ) %>%
  filter(!jpCourt %in% c("5-2", "3-2", "2-1", '2-2'),
         !is.na(jpCourt),
         observationDate <= as.Date("2024-04-26")
  ) %>%
  mutate(jpCourt = paste("Court", jpCourt),
         observationDate = as.Date(observationDate, format = "%Y-%m-%d"))
# evictions <- rio::import(paste0(libDB, "Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/EvictionRecords_Master.csv")) %>%
evictions <- rio::import(paste0(libDB, 'Data Library/Dallas County/Eviction Records/Data/Dallas County Eviction Master/UpdatedEvictions_Deidentified.csv')) %>%
  mutate(jpCourt = str_remove(court, "Court  "))%>%
  filter(!jpCourt %in% c("5-2", "3-2", "NA"))%>%
  distinct()%>%
  filter(!is.na(X) & !is.na(Y)) %>%
  st_as_sf(coords = c("X", "Y"), crs = 4326) %>%
  st_join(
    tigris::counties(state = "TX", cb = TRUE) %>%
      filter(NAME == "Dallas") %>%
      st_transform(crs = 4326),
    join = st_within
  ) %>%
  filter(!is.na(NAME),
         filed_date < '2025-07-01') %>%
  as.data.frame() %>%
  select(-geometry)

#evictions by year
#2024
totevic4 <- evictions%>%
  filter(filed_date >= as.Date('2023-06-20') & filed_date < as.Date('2024-04-25'))
#court observation dates
startDate <- min(totevic4$filed_date, na.rm = TRUE)
endDate <- max(totevic4$filed_date, na.rm = TRUE)

#total days between start and end of data
totdays <- difftime(endDate, startDate, "days") %>%
  as.numeric()

# most recent year (this year) (2023)
totevic1 <- evictions %>%
  filter(filed_date >= as.Date("2022-06-20") & filed_date < as.Date("2023-04-25"))

#last year(2022)
totevic2 <- evictions %>%
  filter(filed_date >= as.Date("2021-06-20") & filed_date < as.Date("2022-04-25"))

# oldest year (two years ago) (2021)
totevic3 <- evictions %>%
  filter(filed_date >= as.Date("2020-11-01") & filed_date < as.Date("2021-04-20"))

#average evictions by day 2024
avgevic3 <- round(nrow(totevic4)/totdays, digits = 1)

#average evictions by day, this year (2023)
avgevic1 <- round(nrow(totevic1)/totdays, digits = 1)

#average evictions by day, last year (2022)
avgevic2 <- round(nrow(totevic2)/totdays, digits = 1)

#percent change in evictions this year (2024)
chgevic3 <-abs(round(((nrow(totevic4)-nrow(totevic1))/nrow(totevic1))*100, digits = 1))
#percent change in evictions this year (2023)
chgevic1 <- round(((nrow(totevic1)-nrow(totevic2))/nrow(totevic2))*100, digits = 1)
#percent change in evictions last year (2022)
chgevic2 <- round(((nrow(totevic1)-nrow(totevic3))/nrow(totevic3))*100, digits = 1)
current_year <- year(Sys.Date())
current_month <- month(Sys.Date())

#average evictions by month in the last 5 years
evicMonths <- evictions %>%
  filter(filed_date >= as.Date("2019-01-01"),
         !(year(filed_date) == current_year & month(filed_date) == current_month)) %>%
  group_by(lubridate::year(filed_date), lubridate::month(filed_date)) %>%
  summarize(totevic = n()) %>%
  rename(yearFiled = 1,
         monthFiled = 2) %>%
  mutate(dateFiled = as.Date(paste0(yearFiled, "-", monthFiled, "-01"))) %>%
  ungroup(.)

#month with highest number of evictions in the last 5 years
highestMonth <- evicMonths %>%
  filter(totevic == max(totevic))

#total number of SMU students observing cases
smuStudents <- n_distinct(courtobs$observer)

#total number of cases observed
totObsCases <- courtobs %>%
  nrow(.)

#total number of cases scheduled by court in time period of court observations
obsCourt <- evictions %>%
  # filter(appearance_date >= as.Date("2023-06-20") & appearance_date < as.Date("2024-04-26")) %>%
  filter(jpCourt %in% unique(courtobs$jpCourt)) %>%
  group_by(jpCourt) %>%
  summarize(totEvic = n()) %>%
  ungroup(.)
obsCourt24 <- evictions %>%
  filter(appearance_date >= as.Date("2023-06-20") & appearance_date < as.Date("2024-04-26")) %>%
  filter(jpCourt %in% unique(courtobs$jpCourt)) %>%
  group_by(jpCourt) %>%
  summarize(totEvic = n()) %>%
  ungroup(.)
obsCourt23 <- evictions %>%
  filter(appearance_date >= as.Date("2022-11-01") & appearance_date < as.Date("2023-04-20")) %>%
  filter(jpCourt %in% unique(courtobs$jpCourt)) %>%
  group_by(jpCourt) %>%
  summarize(totEvic = n()) %>%
  ungroup(.)

#total number of cases observed by volunteers in observation period by court
jpCasesObs <- courtobs %>%
  group_by(jpCourt) %>%
  summarize(obsCases = n()) %>%
  mutate(perObsCases = obsCases/sum(obsCases)) %>%
  ungroup(.) %>%
  left_join(., obsCourt) %>%
  janitor::adorn_totals() %>%
  mutate(perAllCases = obsCases/totEvic)
jpCasesObs24 <- courtobs %>%
  filter(observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  group_by(jpCourt) %>%
  summarize(obsCases = n()) %>%
  mutate(perObsCases = obsCases/sum(obsCases)) %>%
  ungroup(.) %>%
  left_join(., obsCourt24) %>%
  janitor::adorn_totals() %>%
  mutate(perAllCases = obsCases/totEvic)
jpCasesObs23 <- courtobs %>%
  filter(observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  group_by(jpCourt) %>%
  summarize(obsCases = n()) %>%
  mutate(perObsCases = obsCases/sum(obsCases)) %>%
  ungroup(.) %>%
  left_join(., obsCourt23) %>%
  janitor::adorn_totals() %>%
  mutate(perAllCases = obsCases/totEvic)

#cases observed compared to entire county
jpCasesCty <- jpCasesObs %>%
  summarize(obsCases = sum(obsCases),
            totEvic = sum(totEvic)) %>%
  mutate(perAllCases = round(obsCases/totEvic, digits = 3))
jpCasesCty24 <- jpCasesObs24 %>%
  summarize(obsCases = sum(obsCases),
            totEvic = sum(totEvic)) %>%
  mutate(perAllCases = round(obsCases/totEvic, digits = 3))
#case outcome by party filed in favor of by jp court
caseOutcome<- courtobs %>%
  filter(!is.na(jpCourt))%>%
  mutate(outcomeParty = ifelse(str_detect(jpRuled, "Plaintiff"), "Ruled in Favor of Landlord",
                               ifelse(str_detect(jpRuled, "Defendant"), "Ruled in Favor of Tenant", 
                                      ifelse(str_detect(jpRuled, "abated"), "Abated",
                                             ifelse(str_detect(jpRuled, "dismissed"), "Dismissed", jpRuled)))))%>%
  group_by(observationDate, jpCourt, outcomeParty)%>%
  summarise(n= n())

caseOutcome24 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  mutate(outcomeParty = ifelse(str_detect(jpRuled, "Plaintiff"), "Ruled in Favor of Landlord",
                                          ifelse(str_detect(jpRuled, "Defendant"), "Ruled in Favor of Tenant", 
                                                 ifelse(str_detect(jpRuled, "abated"), "Abated",
                                                        ifelse(str_detect(jpRuled, "dismissed"), "Dismissed", jpRuled))))) %>%
  group_by(jpCourt, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(outcomeParty) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(outcomeParty),
         outcomeParty = ifelse(str_detect(outcomeParty, "Other|Dismissed|Abated|Ruled|Unknown"), outcomeParty, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup()
caseOutcome23 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  mutate(outcomeParty = ifelse(str_detect(jpRuled, "Plaintiff"), "Ruled in Favor of Landlord",
                                          ifelse(str_detect(jpRuled, "Defendant"), "Ruled in Favor of Tenant", 
                                                 ifelse(str_detect(jpRuled, "abated"), "Abated",
                                                        ifelse(str_detect(jpRuled, "dismissed"), "Dismissed", jpRuled))))) %>%
  group_by(jpCourt, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(outcomeParty) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(outcomeParty),
         outcomeParty = ifelse(str_detect(outcomeParty, "Other|Dismissed|Abated|Ruled|Unknown"), outcomeParty, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup()

#case outcome by appearance in court
outcomeApp24 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  filter(defAppear != "Unknown") %>%
  mutate(outcomeParty = ifelse(str_detect(jpRuled, "Plaintiff"), "Ruled in Favor of Landlord",
                                          ifelse(str_detect(jpRuled, "Defendant"), "Ruled in Favor of Tenant", 
                                                 ifelse(str_detect(jpRuled, "abated"), "Abated",
                                                        ifelse(str_detect(jpRuled, "dismissed"), "Dismissed", jpRuled))))) %>%
  group_by(defAppear, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.)

outcomeApp23 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  filter(defAppear != "Unknown") %>%
  mutate(outcomeParty = ifelse(str_detect(jpRuled, "Plaintiff"), "Ruled in Favor of Landlord",
                                          ifelse(str_detect(jpRuled, "Defendant"), "Ruled in Favor of Tenant", 
                                                 ifelse(str_detect(jpRuled, "abated"), "Abated",
                                                        ifelse(str_detect(jpRuled, "dismissed"), "Dismissed", jpRuled))))) %>%
  group_by(defAppear, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.)

#case outcome by representation for tenant
outcomeRep24 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  filter(defRep == "Yes, an attorney was present for the defendant." | defRep == "No, the defendant did not have additional representation.") %>%
  mutate(outcomeParty = ifelse(str_detect(jpRuled, "Plaintiff"), "Ruled in Favor of Landlord",
                                          ifelse(str_detect(jpRuled, "Defendant"), "Ruled in Favor of Tenant", 
                                                 ifelse(str_detect(jpRuled, "abated"), "Abated",
                                                        ifelse(str_detect(jpRuled, "dismissed"), "Dismissed", jpRuled))))) %>%
  group_by(defRep, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.)
outcomeRep23 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  filter(defRep == "Yes, an attorney was present for the defendant." | defRep == "No, the defendant did not have additional representation.") %>%
  mutate(outcomeParty = ifelse(str_detect(jpRuled, "Plaintiff"), "Ruled in Favor of Landlord",
                                          ifelse(str_detect(jpRuled, "Defendant"), "Ruled in Favor of Tenant", 
                                                 ifelse(str_detect(jpRuled, "abated"), "Abated",
                                                        ifelse(str_detect(jpRuled, "dismissed"), "Dismissed", jpRuled))))) %>%
  group_by(defRep, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.)

#appearing for hearing
defAppear <- courtobs %>%
  filter(!is.na(jpCourt),
         defAppear != "Unknown") %>%
  group_by(jpCourt, defAppear) %>%
  summarize(count = n()) %>%
  filter(count > 1) %>%
  ungroup(.) %>%
  pivot_wider(names_from = defAppear, values_from = count, values_fill = 0) %>%
  janitor::adorn_totals() %>%
  mutate(AppearPer = Yes/(Yes+No),
         type = "Tenant (Defendant) Appeared for Hearing")

plaAppear <- courtobs %>%
  filter(!is.na(jpCourt),
         plaintiffDesignee != "Unknown") %>%
  group_by(jpCourt, plaintiffDesignee) %>%
  summarize(count = n()) %>%
  filter(count > 1) %>%
  ungroup(.) %>%
  pivot_wider(names_from = plaintiffDesignee, values_from = count, values_fill = 0) %>%
  janitor::adorn_totals() %>%
  mutate(AppearPer = Yes/(Yes+No),
         type = "Landlord (Plaintiff) Appeared for Hearing")

caseAppear <- rbind(defAppear, plaAppear)
#2024
defAppear24 <- courtobs %>%
  filter(!is.na(jpCourt),
         defAppear != "Unknown",
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  group_by(jpCourt, defAppear) %>%
  summarize(count = n()) %>%
  filter(count > 1) %>%
  ungroup(.) %>%
  pivot_wider(names_from = defAppear, values_from = count, values_fill = 0) %>%
  janitor::adorn_totals() %>%
  mutate(AppearPer = Yes/(Yes+No),
         type = "Tenant (Defendant) Appeared for Hearing")

plaAppear24 <- courtobs %>%
  filter(!is.na(jpCourt),
         plaintiffDesignee != "Unknown",
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  group_by(jpCourt, plaintiffDesignee) %>%
  summarize(count = n()) %>%
  filter(count > 1) %>%
  ungroup(.) %>%
  pivot_wider(names_from = plaintiffDesignee, values_from = count, values_fill = 0) %>%
  janitor::adorn_totals() %>%
  mutate(AppearPer = Yes/(Yes+No),
         type = "Landlord (Plaintiff) Appeared for Hearing")

caseAppear24 <- rbind(defAppear24, plaAppear24)

#2023
defAppear23 <- courtobs %>%
  filter(!is.na(jpCourt),
         defAppear != "Unknown",
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  group_by(jpCourt, defAppear) %>%
  summarize(count = n()) %>%
  filter(count > 1) %>%
  ungroup(.) %>%
  pivot_wider(names_from = defAppear, values_from = count, values_fill = 0) %>%
  janitor::adorn_totals() %>%
  mutate(AppearPer = Yes/(Yes+No),
         type = "Tenant (Defendant) Appeared for Hearing")

plaAppear23 <- courtobs %>%
  filter(!is.na(jpCourt),
         plaintiffDesignee != "Unknown",
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  group_by(jpCourt, plaintiffDesignee) %>%
  summarize(count = n()) %>%
  filter(count > 1) %>%
  ungroup(.) %>%
  pivot_wider(names_from = plaintiffDesignee, values_from = count, values_fill = 0) %>%
  janitor::adorn_totals() %>%
  mutate(AppearPer = Yes/(Yes+No),
         type = "Landlord (Plaintiff) Appeared for Hearing")

caseAppear23 <- rbind(defAppear23, plaAppear23)



#case outcomes when defendant is present for all cases observed
defPresent <- courtobs %>%
  filter(!is.na(jpCourt),
         defAppear != "Unknown") %>%
  group_by(defAppear, jpRuled) %>%
  summarize(count = n()) %>%
  ungroup(.) %>%
  pivot_wider(names_from = defAppear, values_from = count, values_fill = 0) %>%
  mutate(NoPer = No/sum(No),
         YesPer = Yes/sum(Yes))

#case outcomes when defendant has representation for all cases observed
defRepresent <- courtobs %>%
  filter(!is.na(jpCourt),
         defAppear == "Yes") %>%
  mutate(legalRep = ifelse(defRep == "Yes, an attorney was present for the defendant.", "Attorney present for tenant (Defendant)", "No attorney present for tenant")) %>%
  group_by(jpCourt, legalRep) %>%
  summarize(count = n()) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(legalRep) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(legalRep),
         legalRep = ifelse(str_detect(legalRep, "tenant"), legalRep, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup()
#2024
defRepresent24 <- courtobs %>%
  filter(!is.na(jpCourt),
         defAppear == "Yes",
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  mutate(legalRep = ifelse(defRep == "Yes, an attorney was present for the defendant.", "Attorney present for tenant (Defendant)", "No attorney present for tenant")) %>%
  group_by(jpCourt, legalRep) %>%
  summarize(count = n()) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(legalRep) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(legalRep),
         legalRep = ifelse(str_detect(legalRep, "tenant"), legalRep, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup()
#2023 
defRepresent23 <- courtobs %>%
  filter(!is.na(jpCourt),
         defAppear == "Yes",
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  mutate(legalRep = ifelse(defRep == "Yes, an attorney was present for the defendant.", "Attorney present for tenant (Defendant)", "No attorney present for tenant")) %>%
  group_by(jpCourt, legalRep) %>%
  summarize(count = n()) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(legalRep) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(legalRep),
         legalRep = ifelse(str_detect(legalRep, "tenant"), legalRep, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup()
#2022

# notice to vacate 
ntv <- courtobs %>%
  filter(!is.na(noticeVacate)) %>%
  group_by(jpCourt, noticeVacate) %>%
  summarize(count = n()) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(noticeVacate) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(noticeVacate),
         noticeVacate = ifelse(str_detect(noticeVacate, "Yes|No|Unknown"), noticeVacate, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup()
ntv24 <- courtobs %>%
  filter(!is.na(noticeVacate),
          observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  group_by(jpCourt, noticeVacate) %>%
  summarize(count = n()) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(noticeVacate) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(noticeVacate),
         noticeVacate = ifelse(str_detect(noticeVacate, "Yes|No|Unknown"), noticeVacate, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup()
ntv23 <- courtobs %>%
  filter(!is.na(noticeVacate),
          observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  group_by(jpCourt, noticeVacate) %>%
  summarize(count = n()) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(noticeVacate) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(noticeVacate),
         noticeVacate = ifelse(str_detect(noticeVacate, "Yes|No|Unknown"), noticeVacate, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup()

# average hearing time
hearingtime <- courtobs %>%
  mutate(dockLength = docketEnd-docketStart) %>%
  group_by(jpCourt, observationDate) %>%
  summarize(CasesObs = n(),
            AvgDockLength = mean(dockLength, na.rm=TRUE)) %>%
  ungroup() %>%
  group_by(jpCourt)%>%
  summarize(CasesObs = sum(CasesObs),
            SumDockLength = as.numeric(sum(AvgDockLength))) %>%
  ungroup(.) %>%
  janitor::adorn_totals() %>%
  mutate(AvgCaseLength = SumDockLength/CasesObs) %>%
  select(-SumDockLength)#%>%
hearingtime24 <- courtobs %>%
  filter( observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26"))%>%
  mutate(dockLength = docketEnd-docketStart) %>%
  group_by(jpCourt, observationDate) %>%
  summarize(CasesObs = n(),
            AvgDockLength = mean(dockLength, na.rm=TRUE)) %>%
  ungroup() %>%
  group_by(jpCourt)%>%
  summarize(CasesObs = sum(CasesObs),
            SumDockLength = as.numeric(sum(AvgDockLength))) %>%
  ungroup(.) %>%
  janitor::adorn_totals() %>%
  mutate(AvgCaseLength = SumDockLength/CasesObs) %>%
  select(-SumDockLength)
hearingtime23 <- courtobs %>%
  filter(observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20"))%>%
  mutate(dockLength = docketEnd-docketStart) %>%
  group_by(jpCourt, observationDate) %>%
  summarize(CasesObs = n(),
            AvgDockLength = mean(dockLength, na.rm=TRUE)) %>%
  ungroup() %>%
  group_by(jpCourt)%>%
  summarize(CasesObs = sum(CasesObs),
            SumDockLength = as.numeric(sum(AvgDockLength))) %>%
  ungroup(.) %>%
  janitor::adorn_totals() %>%
  mutate(AvgCaseLength = SumDockLength/CasesObs) %>%
  select(-SumDockLength)
  
  


#eviction reason
totReason <- courtobs %>%
  filter(!is.na(jpCourt)) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason)) %>%
  group_by(evicClean) %>%
  summarize(count = n()) %>%
  mutate(jpCourt = "Total",
         perCases = count/sum(count)) %>%
  ungroup(.)
totReason23 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason)) %>%
  group_by(evicClean) %>%
  summarize(count = n()) %>%
  mutate(jpCourt = "Total",
         perCases = count/sum(count)) %>%
  ungroup(.)
totReason24 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason)) %>%
  group_by(evicClean) %>%
  summarize(count = n()) %>%
  mutate(jpCourt = "Total",
         perCases = count/sum(count)) %>%
  ungroup(.)

evicReason <- courtobs %>%
  filter(!is.na(jpCourt)) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason)) %>%
  group_by(jpCourt, evicClean) %>%
  summarize(count = n()) %>%
  mutate(perCases = count/sum(count)) %>%
  ungroup(.) %>%
  rbind(., totReason)
  
evicReason24 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26")) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason)) %>%
  group_by(jpCourt, evicClean) %>%
  summarize(count = n()) %>%
  mutate(perCases = count/sum(count)) %>%
  ungroup(.) %>%
  rbind(., totReason24)

evicReason23 <- courtobs %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20")) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason)) %>%
  group_by(jpCourt, evicClean) %>%
  summarize(count = n()) %>%
  mutate(perCases = count/sum(count)) %>%
  ungroup(.) %>%
  rbind(., totReason23)

#non payment of rent 
npr <- courtobs %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason)) %>%
  filter(!is.na(jpCourt),
         evicClean == 'Non-payment of rent')%>%
  group_by(observationDate, jpCourt)%>%
  summarise(n=n())

  
##### Text Inputs #####
jp11 <- jpCasesObs %>% 
  filter(jpCourt == "Court 1-1") %>% 
  pull(obsCases)

jp11_24 <- jpCasesObs24 %>% 
  filter(jpCourt == "Court 1-1") %>% 
  pull(obsCases)

jp12 <- jpCasesObs %>% 
  filter(jpCourt == "Court 1-2") %>% 
  pull(obsCases)

jp12_24 <- jpCasesObs24 %>% 
  filter(jpCourt == "Court 1-2") %>% 
  pull(obsCases)

jp31 <- jpCasesObs %>% 
  filter(jpCourt == "Court 3-1") %>% 
  pull(obsCases)

jp31_24 <- jpCasesObs24 %>% 
  filter(jpCourt == "Court 3-1") %>% 
  pull(obsCases)

jp41 <- jpCasesObs %>% 
  filter(jpCourt == "Court 4-1") %>% 
  pull(obsCases)

jp41_24 <- jpCasesObs24 %>% 
  filter(jpCourt == "Court 4-1") %>% 
  pull(obsCases)

jp51 <- jpCasesObs %>% 
  filter(jpCourt == "Court 5-1") %>% 
  pull(obsCases)

jp51_24 <- jpCasesObs24 %>% 
  filter(jpCourt == "Court 5-1") %>% 
  pull(obsCases)

jp42_24 <- jpCasesObs24 %>% 
  filter(jpCourt == "Court 4-2") %>% 
  pull(obsCases)

jpSum <- jp11+jp31+jp51

jpPer <- jpSum/totObsCases

hc_cpal <- hc_theme(
        chart = list(
          style = list(
            fontFamily = "Inter"
          )
        )
      )

courtobs23 <- courtobs%>%
  filter(observationDate >= as.Date("2022-11-01") & observationDate < as.Date("2023-04-20"))
courtobs24 <- courtobs %>%
  filter(observationDate >= as.Date("2023-06-20") & observationDate < as.Date("2024-04-26"))
```

```{r}
#| include: FALSE

deac <- read.csv('data/DEAC Processed.csv')
reference_date <- "1899-12-30"
deac$docketStart <- paste(reference_date, deac$docketStart)  # Combine with reference date
deac$docketEnd <- paste(reference_date, deac$docketEnd)  # Combine with reference date

# Convert the combined datetime strings to POSIXct
deac$docketStart <- as.POSIXct(deac$docketStart, format="%Y-%m-%d %I:%M:%S %p", tz="UTC")
deac$docketEnd <- as.POSIXct(deac$docketEnd, format="%Y-%m-%d %I:%M:%S %p", tz="UTC")

obsCourtDeac <- evictions %>%
  filter(appearance_date >= as.Date("2024-09-26") & appearance_date <= as.Date("2025-01-18")) %>%
  filter(jpCourt %in% unique(deac$jpCourt)) %>%
  group_by(jpCourt) %>%
  summarize(totEvic = n()) %>%
  ungroup(.)

jpCasesDeac <- deac %>%
  filter(observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18"))%>%
  group_by(jpCourt) %>%
  summarize(obsCases = n()) %>%
  mutate(perObsCases = obsCases/sum(obsCases)) %>%
  ungroup(.) %>%
  left_join(., obsCourtDeac) %>%
  janitor::adorn_totals() %>%
  mutate(perAllCases = obsCases/totEvic)

totReasonDeac <- deac %>%
  filter(!is.na(jpCourt),
         defAppear == "Yes",
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason),
         evicClean = case_when(
           is.na(evicClean) ~ "Unknown",
           evicClean == "Holdover" ~ "Holdover/lease expiration",
           evicClean == "Lease expired" ~ "Holdover/lease expiration",
           evicClean == "Other" ~ "Unknown",
           evicClean == "LV" ~ "Violated lease",
           evicClean == "" ~ "Unknown",
           TRUE ~ evicClean)) %>%
  group_by(evicClean) %>%
  summarize(count = n()) %>%
  mutate(jpCourt = "Total",
         perCases = count/sum(count)) %>%
  ungroup(.)

evicReasonDeac <- deac %>%
  filter(!is.na(jpCourt),
         defAppear == "Yes",
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")) %>%
  mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason),
         evicClean = case_when(
           is.na(evicClean) ~ "Unknown",
           evicClean == "Holdover" ~ "Holdover/lease expiration",
           evicClean == "Lease expired" ~ "Holdover/lease expiration",
           evicClean == "Other" ~ "Unknown",
           evicClean == "LV" ~ "Violated lease",
           evicClean == "" ~ "Unknown",
           TRUE ~ evicClean
           )) %>%
  group_by(jpCourt, evicClean) %>%
  summarize(count = n()) %>%
  mutate(perCases = count/sum(count)) %>%
  ungroup(.) %>%
  rbind(., totReasonDeac)


defAppearDeac <- deac %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")
         ) %>%
  group_by(jpCourt, defAppear) %>%
  summarize(count = n()) %>% 
  mutate(percent = round(100 * count / sum(count), 2)) %>%
  ungroup(.) %>%
  # janitor::adorn_totals() %>%
  mutate(type = "Tenant (Defendant)") %>%
  rename(appear = defAppear)

plaAppearDeac <- deac %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")
         ) %>%
  group_by(jpCourt, plaintiffDesignee) %>%
  summarize(count = n()) %>%
  mutate(percent = round(100 * count / sum(count), 2)) %>%
  ungroup(.) %>%
  # janitor::adorn_totals() %>%
  mutate(type = "Landlord (Plaintiff)")%>%
  rename(appear = plaintiffDesignee)

defAppearDeac_total <- deac %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")) %>%
  group_by(defAppear) %>%
  summarize(count = n()) %>%
  mutate(percent = round(100 * count / sum(count), 2),
         type = "Tenant (Defendant)",
         jpCourt = "Total") %>%
  rename(appear = defAppear)

plaAppearDeac_total <- deac %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")) %>%
  group_by(plaintiffDesignee) %>%
  summarize(count = n()) %>%
  mutate(percent = round(100 * count / sum(count), 2),
         type = "Landlord (Plaintiff)",
         jpCourt = "Total") %>%
  rename(appear = plaintiffDesignee)


caseAppearDeac <- rbind(defAppearDeac, plaAppearDeac, defAppearDeac_total, plaAppearDeac_total)

defRepresentDeac <- deac %>%
  filter(!is.na(jpCourt),
         defAppear == "Yes",
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")
         ) %>%
  mutate(legalRep = ifelse(defRep == "Yes, an attorney was present for the defendant.", "Attorney present for tenant (Defendant)", "No attorney present for tenant")) %>%
  group_by(jpCourt, 
           legalRep) %>%
  summarize(count = n()) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(legalRep) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(legalRep),
         legalRep = ifelse(str_detect(legalRep, "tenant"), legalRep, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perRep = count/sum(count)) %>%
  ungroup()


ntvDeac <- deac %>%
  filter(!is.na(noticeVacate),
          observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18"),
         # str_detect(noticeConfirm, "^Yes")
         ) %>%
  group_by(jpCourt, noticeVacate) %>%
  summarize(count = n()) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(noticeVacate) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(noticeVacate),
         noticeVacate = ifelse(str_detect(noticeVacate, "Yes|No|Unknown"), noticeVacate, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perntv = count/sum(count)) %>%
  ungroup()


hearingtimeDeac <- deac %>%
  filter(observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18"))%>%
  mutate(dockLength = docketEnd-docketStart) %>%
  filter(!is.na(dockLength))%>%
  group_by(jpCourt, observationDate) %>%
  summarize(CasesObs = n(),
            AvgDockLength = mean(dockLength, na.rm=TRUE)) %>%
  ungroup() %>%
  group_by(jpCourt)%>%
  summarize(CasesObs = sum(CasesObs),
            SumDockLength = as.numeric(sum(AvgDockLength))) %>%
  ungroup(.) %>%
  janitor::adorn_totals() %>%
  mutate(AvgCaseLength = SumDockLength/CasesObs) %>%
  select(-SumDockLength)


caseOutcomeDeac <- deac %>%
  filter(!is.na(jpCourt),
         !is.na(jpRuled),
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")
         ) %>%
  mutate(outcomeParty = case_when(
    is.na(jpRuled) ~ "Unknown",
    str_detect(jpRuled, "Plaintiff") ~ "Ruled in Favor of Landlord",
    str_detect(jpRuled, "Defendant") ~ "Ruled in Favor of Tenant",
    str_detect(jpRuled, "abated") ~ "Abated",
    str_detect(jpRuled, "dismissed") ~ "Dismissed",
    jpRuled == "" ~ "Unknown",
    TRUE ~ jpRuled)) %>%
  group_by(jpCourt, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.) %>%
  group_by(outcomeParty) %>%
  group_map(~ .x %>%
          janitor::adorn_totals(),.keep = T) %>% 
  bind_rows() %>%
  mutate(test = lag(outcomeParty),
         outcomeParty = ifelse(str_detect(outcomeParty, "Other|Dismissed|Abated|Ruled|Unknown"), outcomeParty, test)) %>%
  select(-test) %>%
  group_by(jpCourt) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup()

outcomeAppDeac <- deac %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")
         ) %>%
  filter(defAppear != "Unknown") %>%
  mutate(outcomeParty = case_when(
    is.na(jpRuled) ~ "Unknown",
    str_detect(jpRuled, "Plaintiff") ~ "Ruled in Favor of Landlord",
    str_detect(jpRuled, "Defendant") ~ "Ruled in Favor of Tenant",
    str_detect(jpRuled, "abated") ~ "Abated",
    str_detect(jpRuled, "dismissed") ~ "Dismissed",
    jpRuled == "" ~ "Unknown",
    TRUE ~ jpRuled
    )) %>%
  group_by(defAppear, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.)

outcomeRepDeac <- deac %>%
  filter(!is.na(jpCourt),
         observationDate >= as.Date("2024-09-26") & observationDate <= as.Date("2025-01-18")
         ) %>%
  filter(defRep == "Yes, an attorney was present for the defendant." | defRep == "No, the defendant did not have additional representation.") %>%
  mutate(outcomeParty = case_when(
    str_detect(jpRuled, "Plaintiff") ~ "Ruled in Favor of Landlord",
    str_detect(jpRuled, "Defendant") ~ "Ruled in Favor of Tenant",
    str_detect(jpRuled, "abated") ~ "Abated",
    str_detect(jpRuled, "dismissed") ~ "Dismissed",
    jpRuled == "" ~ "Unknown",
    TRUE ~ jpRuled
    )) %>%
  group_by(defRep, outcomeParty) %>%
  summarize(count = n()) %>%
  mutate(perOutcome = count/sum(count)) %>%
  ungroup(.)



defRepAppear <- deac %>%
  group_by(defRep, defAppear) %>%
  summarise(n = n(),
            percent = n/sum(n))

observers <- deac %>% group_by(observer) %>%
  summarise(n=n())



jpCasesCtyDeac <- jpCasesDeac %>%
  summarize(obsCases = sum(obsCases),
            totEvic = sum(totEvic)) %>%
  mutate(perAllCases = round(obsCases/totEvic, digits = 3))

casesByCourtDeac <- deac %>%
  group_by(jpCourt) %>%
  summarise(obsCases = n()) %>%
  mutate(perObsCases = obsCases/sum(obsCases)) 


totevicDeac <- evictions%>%
  filter(filed_date >= as.Date('2024-09-26') & filed_date <= as.Date('2025-01-18'))
totevic23 <- evictions %>%
  filter(filed_date >= as.Date('2023-09-26') & filed_date <= as.Date('2024-01-18'))
totevic22 <- evictions %>%
  filter(filed_date >= as.Date('2022-09-26') & filed_date <= as.Date('2023-01-18'))
chgevic23 <-round(((nrow(totevicDeac)-nrow(totevic23))/nrow(totevic23))*100, digits = 1)
chgevic22 <-round(((nrow(totevic23)-nrow(totevic22))/nrow(totevic22))*100, digits = 1)

startDateDeac <- min(deac$observationDate, na.rm = TRUE)
endDateDeac <- max(deac$observationDate, na.rm = TRUE)

#total days between start and end of data
totdaysDeac <- difftime(endDateDeac, startDateDeac, "days") %>%
  as.numeric()
avgevicDeac <- round(nrow(totevicDeac)/totdaysDeac, digits = 1)

```

<h2 style="font-size:48px;">

Dallas Court Observation Project

</h2>

**Eviction has a devastating impact on families:** involuntary
displacement leads to greater material hardship, poorer health and
avoidable healthcare costs for children and their mothers, negative
impacts on children’s academic achievement, and greater depression and
parental stress. Eviction disproportionately impacts communities of
color, and the likelihood of receiving an eviction judgment is highest
for mothers with children.

**Between
`r format(min(as.Date(totevicDeac$filed_date), na.rm = TRUE), "%B %d, %Y")`
and January 18, 2025, `r prettyNum(nrow(totevicDeac), big.mark = ',')`
evictions were filed in Dallas County, an average of `r avgevicDeac` per
day.** This represents an `r paste0(abs(chgevic23), "%")` decrease over
this same time period in 2023 and a `r paste0(abs(chgevic22), "%")`
decrease over the same time period in 2022.

```{r}
#| fig-height: 4

evicMonthsTime <- evicMonths %>%
  mutate(dateMonth = format(ymd(dateFiled), "%B"))
evicMonthsTime$yearFiled<- as.character(evicMonthsTime$yearFiled)

evicMonths2019 <- evicMonthsTime %>%
  filter(yearFiled == '2019')
evicMonths2020 <- evicMonthsTime %>%
  filter(yearFiled == '2020')
evicMonths2021 <- evicMonthsTime %>%
  filter(yearFiled == '2021')
evicMonths2022 <- evicMonthsTime %>%
  filter(yearFiled == '2022')
evicMonths2023 <- evicMonthsTime %>%
  filter(yearFiled == '2023')
evicMonths2024 <- evicMonthsTime %>%
  filter(yearFiled == '2024')
evicMonths2025 <- evicMonthsTime %>%
  filter(yearFiled == '2025')

evicMonthstotal <- evicMonthsTime %>%
  group_by(monthFiled, dateMonth) %>%  
  summarize(totevic = sum(totevic), yearFiled = "Total")


highchart()%>%
  hc_add_series(data = evicMonthstotal,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled),
                visible = FALSE)%>%
  hc_add_series(data = evicMonths2019,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled),
                color = '#FE9AD4')%>%
  hc_add_series(data = evicMonths2020,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled))%>%
  hc_add_series(data = evicMonths2021,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled),
                visible = FALSE)%>%
  hc_add_series(data = evicMonths2022,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled),
                visible = FALSE)%>%
  hc_add_series(data = evicMonths2023,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled))%>%
  hc_add_series(data = evicMonths2024,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled))%>%
  hc_add_series(data = evicMonths2025,
                type = 'line',
                hcaes(x = dateMonth,
                      y = totevic,
                      group = yearFiled))%>%
  hc_xAxis(type = 'category',
           categories = unique(evicMonthsTime$dateMonth))%>%
  hc_add_theme(hc_cpal)%>%
  hc_colors(palette_cpal_main)%>%
  hc_title(text = list('Monthly Eviction Totals by Year in Dallas County'))
```

# Eviction Court Observation Process

<br>

```{r, results = 'asis'}


hc <- highchart() %>% 
  hc_chart(type = "organization",
           inverted = TRUE) %>% 
  hc_add_series(data = list(
    list(from = "Tenant receives written Notice to Vacate.", to = "Tenant given 1 or more days to move out of rental, depending on lease.", name = "Tenant receives written Notice to Vacate."),
    list(from = "Tenant given 1 or more days to move out of rental, depending on lease.", to = "Tenant moves out of rental or\nresolves issue with the landlord.", name = "Tenant moves out or resolves issue."),
    list(from = "Tenant given 1 or more days to move out of rental, depending on lease.", to = "Tenant does not leave rental within\ntime frame dictated by Notice to Vacate.", name = "Tenant does not leave rental in time."),
    list(from = "Tenant does not leave rental within\ntime frame dictated by Notice to Vacate.", to = "Landlord files eviction suit with their local JP court.", name = "Landlord files eviction suit."),
    list(from = "Landlord files eviction suit with their local JP court.", to = "Hearing is scheduled at least 10 days\nafter eviction filing is made.", name = "Hearing is scheduled."),
    list(from = "Hearing is scheduled at least 10 days\nafter eviction filing is made.", to = "Case is heard at JP court.", name = "Case is heard."),
    list(from = "Case is heard at JP court.", to = "Eviction Judgement", name = "Eviction Judgement"),
    list(from = "Eviction Judgement", to = "Case is dismissed.", name = "Case is dismissed."),
    list(from = "Eviction Judgement", to = "Ruled in favor of the tenant.", name = "Ruled in favor of tenant."),
    list(from = "Eviction Judgement", to = "Ruled in favor of the landlord.", name = "Ruled in favor of landlord."),
    list(from = "Eviction Judgement", to = "Case is abated or rescheduled.", name = "Case is abated/rescheduled."),
    list(from = "Eviction Judgement", to = "Other outcome.", name = "Other outcome."),
    list(from = "Ruled in favor of the landlord.", to = "Tenant may appeal the case within 5 days.", name = "Tenant may appeal."),
    list(from = "Ruled in favor of the landlord.", to = "The tenant does not appeal and\nfails to move out.", name = "Tenant does not appeal/move out."),
    list(from = "The tenant does not appeal and\nfails to move out.", to = "Landlord may obtain a Writ of Possession\nfrom the Justice of the Peace.", name = "Landlord gets Writ of Possession."),
    list(from = "Landlord may obtain a Writ of Possession\nfrom the Justice of the Peace.", to = "Constable posts a 24-hour notice before executing writ.", name = "24-hour notice posted."),
    list(from = "Constable posts a 24-hour notice before executing writ.", to = "Constable executes writ and begins removing the tenant's property.", name = "Writ executed, tenant's property removed.")
  ),
  nodes = list(
    list(id = "Eviction Judgement", color = "lightblue")
  )) %>%
  hc_add_theme(hc_cpal)%>%
  hc_colors("#008097")%>%
  hc_plotOptions(organization = list(
    dataLabels = list(
      enabled = TRUE,
      style = list(
        fontSize = "11px",
        textOutline = "0px",
        width = "1500px" # Adjust width as needed
      ),
      overflow = "justify"
    ),
    states = list(
      hover = list(
        color = "#00BFE0", # Highlight color on hover
        borderWidth = 2,  # Border width on hover
        borderColor = "#000000" # Border color on hover
      )
    )
  ))%>%
  hc_tooltip(enabled = FALSE)

saveWidget(hc, "chart1.html", selfcontained = TRUE)




```

<iframe src="chart1.html" width="900" height="870" style="border:none;">

</iframe>

# Project Background

In Spring 2021, the Child Poverty Action Lab (CPAL) launched a court
observation project to collect, analyze, and share eviction-related data
not otherwise reported publicly. Eviction docket court observation has
been ongoing since, with the purpose of improving local understanding of
how eviction unfolds, uncovering barriers/challenges for tenants and
landlords, and identifying ways to better support tenants and landlords
upstream of an eviction hearing. Observation first began in Dallas
County Justice of the Peace Court 1-1 and has since expanded to nearly
every JP court.

# Case Observation Protocol

The court observation project is powered by volunteer observers who
attend eviction dockets in-person, take notes as eviction cases are
heard, and then enter the data digitally for CPAL analysis. Since late
2021, volunteer observers have mostly been SMU Dedman School of Law and
UNT-Dallas College of Law students, primarily in their second or third
year of law school, volunteering as part of a class requirement or to
fulfill public service hours. The fall 2024 dataset represents
observations by volunteer SMU law students but also includes
observations by paid research assistants working in collaboration with
the University of Michigan, the University of California San Diego, and
the Dallas Eviction Advocacy Center. CPAL staff on-board volunteer
observers through a two-part training: the first is an introductory
online session to explain the eviction process, and the second is an
onsite session at a Justice of the Peace court focused on data
collection through observation.

Once trained, volunteers sign-up for dockets to observe using a digital
scheduler. Volunteers select dockets to observe based on their
availability, so observed cases do not represent a random selection.
During docket observations, volunteers take notes on cases heard using a
paper template and then enter the data afterwards into a Google Form
created and managed by CPAL. Before analysis and reporting, CPAL reviews
and cleans the data, as needed.

# Case Observation Findings

From
`r format(min(as.Date(deac$observationDate), na.rm = TRUE), "%B %d, %Y")`
through
`r format(max(as.Date(deac$observationDate), na.rm = TRUE), "%B %d, %Y")`,
7 SMU law students and 3 research assistants observed
**`r formattable::comma(nrow(deac), digits = 0)` cases**, representing
**`r paste0(jpCasesCtyDeac$perAllCases*100, "% coverage")`** of all
initially scheduled hearings across seven courts. Coverage was greatest
in
`r casesByCourtDeac %>% slice_max(obsCases, n = 1) %>% pull(jpCourt)`:
observers recorded data for 2,032 cases, representing
`r scales::percent(max(jpCasesDeac$perAllCases), accuracy = .1)`
coverage. Although observers were in nine courts during the observation
period, data from two courts (4-2 and 5-2) are not reported here due to
a limited sample of observed cases.

<!-- ::: panel-tabset -->

<!-- ## Fall 2024 -->

```{r}
#| fig-height: 4

plotDeacCases <- jpCasesDeac %>%
  filter(!is.na(jpCourt) & obsCases > 1
         ) %>%
  select(jpCourt, perAllCases, obsCases) %>%
  mutate(perAntCases = 1-perAllCases) %>%
  pivot_longer(cols = c("perAllCases", "perAntCases")) %>%
  rename(perCases = value) %>%
  mutate(type = ifelse(name == "perAllCases", "Observed", "Not Observed")) %>%
  select(-name) %>%
  mutate(perCases=100*perCases)

highchart()%>%
  hc_chart(type = 'column')%>%
  hc_add_series(plotDeacCases,
                type = 'column',
                mapping = hcaes(
                  x = jpCourt,
                  y = round(perCases, 2),
                  group = type,
                  color = ifelse(jpCourt == "Total", 
                                 c('#4B1707','#ED683F')[match(type, unique(plotDeacCases$type))], 
                                 palette_cpal_main[match(type, unique(plotDeacCases$type))])),
                color = c('#008097', '#042d33'),
                dataLabels = list(enabled = TRUE, format = "{point.y:.0f}%", style = list(fontWeight = "bold")))%>%
  hc_xAxis(categories = unique(plotDeacCases$jpCourt)) %>%
  hc_yAxis(labels = list(format = "{value: .0f}%"), 
           max = 100) %>%
  hc_plotOptions(column = list(
    dataLabels = list(enabled = TRUE, format = "{value:.0f}%")
  )) %>%
  hc_tooltip(
    useHTML = TRUE,
    pointFormat = paste0(
      "<b>{series.name}</b><br>",
      "Share: {point.y:.2f}%<br>",
      "Observed Cases: {point.obsCases:,.0f}"
    )
  ) %>%
  hc_add_theme(hc_cpal)%>%
  hc_title(text = "Percent of Cases Observed in Fall 2024 Cycle")

jpCasesDeac %>%
  ungroup(.) %>%
  transmute('JP Court' = jpCourt,
            'Observed Cases' = scales::number(obsCases, big.mark = ","),
            'Share of Total Observed Cases (%)' = scales::percent(perObsCases, accuracy = 0.1),
            'Scheduled Hearings*' = scales::number(totEvic, big.mark = ","),
            'Observed Cases by Court (%)' = scales::percent(perAllCases, accuracy = 0.1)) %>%
    datatable(options = list(paging = FALSE,
                           searching = FALSE,
                           info = FALSE
                           ),
            rownames = FALSE) %>%
  formatStyle(columns = colnames(.), fontWeight = 'bold', `text-align` = 'left') %>%
  formatStyle(columns = colnames(.), fontFamily = "Poppins")


```

<!-- ## Summer '23 - Spring '24 -->

<!-- ```{r, Cases Chart} -->

<!-- #| fig-height: 4 -->

<!-- ##### highchart 1 ##### -->

<!-- plotCases <- jpCasesObs24 %>% -->

<!--   filter(!is.na(jpCourt) & obsCases > 1) %>% -->

<!--   select(jpCourt, perAllCases) %>% -->

<!--   mutate(perAntCases = 1-perAllCases) %>% -->

<!--   pivot_longer(cols = c("perAllCases", "perAntCases")) %>% -->

<!--   rename(perCases = value) %>% -->

<!--   mutate(type = ifelse(name == "perAllCases", "Observed", "Not Observed")) %>% -->

<!--   select(-name) %>% -->

<!--   mutate(perCases=100*perCases) -->

<!-- highchart()%>% -->

<!--   hc_chart(type = 'column')%>% -->

<!--   hc_add_series(plotCases, -->

<!--                 type = 'column', -->

<!--                 mapping = hcaes( -->

<!--                   x = jpCourt, -->

<!--                   y = round(perCases, 2), -->

<!--                   group = type, -->

<!--                   color = ifelse(jpCourt == "Total",  -->

<!--                                  c('#4B1707','#ED683F')[match(type, unique(plotCases$type))],  -->

<!--                                  palette_cpal_main[match(type, unique(plotCases$type))])), -->

<!--                 color = c('#008097', '#042d33'), -->

<!--                 dataLabels = list(enabled = TRUE, format = "{point.y:.0f}%", style = list(fontWeight = "bold")))%>% -->

<!--   hc_xAxis(categories = unique(plotCases$jpCourt)) %>% -->

<!--   hc_yAxis(labels = list(format = "{value: .0f}%"),  -->

<!--            max = 100) %>% -->

<!--   hc_plotOptions(column = list( -->

<!--     dataLabels = list(enabled = TRUE, format = "{value:.0f}%") -->

<!--   )) %>% -->

<!--   hc_tooltip(pointFormat = "{series.name} cases: {point.y:.2f}%") %>% -->

<!--   hc_add_theme(hc_cpal)%>% -->

<!--   hc_title(text = "Percent of Cases Observed in Summer '23 - Spring '24 Cycle") -->

<!-- jpCasesObs24 %>% -->

<!--   ungroup(.) %>% -->

<!--   transmute('JP Court' = jpCourt, -->

<!--             'Observed Cases' = scales::number(obsCases, big.mark = ","), -->

<!--             'Share of Total Observed Cases (%)' = scales::percent(perObsCases, accuracy = 0.1), -->

<!--             'Scheduled Hearings*' = scales::number(totEvic, big.mark = ","), -->

<!--             'Observed Cases by Court (%)' = scales::percent(perAllCases, accuracy = 0.1)) %>% -->

<!--     datatable(options = list(paging = FALSE, -->

<!--                            searching = FALSE, -->

<!--                            info = FALSE -->

<!--                            ), -->

<!--             rownames = FALSE) %>% -->

<!--   formatStyle(columns = colnames(.), fontWeight = 'bold', `text-align` = 'left') %>% -->

<!--   formatStyle(columns = colnames(.), fontFamily = "Poppins") -->

<!-- ``` -->

<!-- ## Fall '22 - Spring '23 -->

<!-- ```{r} -->

<!-- #| fig-height: 4 -->

<!-- plotCases23 <- jpCasesObs23 %>% -->

<!--   filter(!is.na(jpCourt) & obsCases > 1) %>% -->

<!--   select(jpCourt, perAllCases) %>% -->

<!--   mutate(perAntCases = 1-perAllCases) %>% -->

<!--   pivot_longer(cols = c("perAllCases", "perAntCases")) %>% -->

<!--   rename(perCases = value) %>% -->

<!--   mutate(type = ifelse(name == "perAllCases", "Observed", "Not Observed")) %>% -->

<!--   select(-name) %>% -->

<!--   mutate(perCases=100*perCases) -->

<!-- highchart()%>% -->

<!--   hc_chart(type = 'column')%>% -->

<!--   hc_add_series(plotCases23, -->

<!--                 type = 'column', -->

<!--                 mapping = hcaes( -->

<!--                   x = jpCourt, -->

<!--                   y = round(perCases, 2), -->

<!--                   group = type, -->

<!--                   color = ifelse(jpCourt == "Total",  -->

<!--                                  c('#4B1707','#ED683F')[match(type, unique(plotCases23$type))],  -->

<!--                                  palette_cpal_main[match(type, unique(plotCases23$type))])), -->

<!--                 color = c('#008097', '#042d33'), -->

<!--                 dataLabels = list(enabled = TRUE, format = "{point.y:.0f}%", style = list(fontWeight = "bold")))%>% -->

<!--   hc_xAxis(categories = unique(plotCases23$jpCourt)) %>% -->

<!--   hc_yAxis(labels = list(format = "{value: .0f}%"),  -->

<!--            max = 100) %>% -->

<!--   hc_plotOptions(column = list( -->

<!--     dataLabels = list(enabled = TRUE, format = "{value:.0f}%") -->

<!--   )) %>% -->

<!--   hc_tooltip(pointFormat = "{series.name} cases: {point.y:.2f}%") %>% -->

<!--   hc_add_theme(hc_cpal)%>% -->

<!--   hc_title(text = "Percent of Cases Observed in Fall '22 - Spring '23 Cycle") -->

<!-- jpCasesObs23 %>% -->

<!--   ungroup(.) %>% -->

<!--   transmute('JP Court' = jpCourt, -->

<!--             'Observed Cases' = scales::number(obsCases, big.mark = ","), -->

<!--             'Share of Total Observed Cases (%)' = scales::percent(perObsCases, accuracy = 0.1), -->

<!--             'Scheduled Hearings*' = scales::number(totEvic, big.mark = ","), -->

<!--             'Observed Cases by Court (%)' = scales::percent(perAllCases, accuracy = 0.1)) %>% -->

<!--     datatable(options = list(paging = FALSE, -->

<!--                            searching  = FALSE, -->

<!--                            info = FALSE -->

<!--                            ), -->

<!--             rownames = FALSE) %>% -->

<!--   formatStyle(columns = colnames(.), fontWeight = 'bold', `text-align` = 'left') %>% -->

<!--   formatStyle(columns = colnames(.), fontFamily = "Poppins") -->

<!-- ``` -->

<!-- ::: -->

::: column-margin
The scheduled hearings indicator was calculated based on the hearing
date set at the time of the eviction filing. If a hearing date was
subsequently rescheduled for a date later than January 18, 2025, then
the case is still included here in the ‘scheduled hearings’ count. Some
scheduled hearings may have been dismissed in advance of the docket, so
‘coverage’ here is likely an underrepresentation of cases observed
relative to the number of cases heard during a docket.
:::

<br>

## Across cases observed in Fall 2024, we found:

**Most eviction cases were due to nonpayment of rent.**

<!-- ::: panel-tabset -->

<!-- ## Fall 2024 -->

```{r}
#| fig-height: 5
plotReasonDeac <- evicReasonDeac 


evicClean_colors <- c(
  "Holdover/lease expiration" = "#0047bd",
  "Multiple Reasons" = "#a80092",
  "Non-payment of rent" = "#042d33",
  "Unknown" = "#ed018c",
  "Violated lease" = "#008097"#,
  # "NA" = "#eaca2d"
  )

chart_container <- htmltools::div(style = "display: flex; flex-wrap: wrap; justify-content: center; overflow-y: hidden; gap: 5px") 

createLegendBox <- function(color, label) {
  htmltools::div(
    style = paste0("display: flex; align-items: center; margin-right: 15px;"),
    htmltools::div(style = paste0("width: 20px; height: 20px; background-color: ", color, "; margin-right: 5px;")),
    htmltools::span(label)
  )
}

for (court in unique(plotReasonDeac$jpCourt)){
  court_data <- plotReasonDeac %>% filter(jpCourt == court)%>%
    mutate(color = evicClean_colors[evicClean])
  hc<- highchart() %>%
    hc_chart(type = "pie") %>%
    hc_add_series(
      data = court_data,
      hcaes(x = evicClean,
            y = round(perCases*100, 2),
            color = color,
            count = count),
      name = 'Percent',
      type = "pie",
      dataLabels = list(enabled = FALSE),
      tooltip = list(
        pointFormat = paste0(
          "{point.name}: <b>{point.y:.2f}%</b><br>",
          "Number of Cases: {point.count:,.0f}"
        )),
      showInLegend=TRUE,
      colorByPoint = TRUE
      ) %>%
    hc_legend(enabled = FALSE)%>%
    hc_title(text = paste(court),
             style = list(fontSize = "15px", fontWeight = 'bold'))%>%
    hc_size(height=200, width = 200)%>%
    hc_add_theme(hc_cpal)
      
    chart_container <- htmltools::tagAppendChild(chart_container, 
                                                 htmltools::div(style = "width: 200px; height: 180px; margin: 5px;", hc)) 
    }

legend_container <- htmltools::div(
  style = "display: flex; flex-wrap: wrap; justify-content: center; margin-top: 10px;"
)


for (reason in names(evicClean_colors)) {
  legend_container <- htmltools::tagAppendChild(legend_container, 
                                               createLegendBox(evicClean_colors[reason], reason))
}

chart_container <- htmltools::tagAppendChild(chart_container, legend_container)


chart_container


```

<!-- ## Summer '23 - Spring '24 -->

<!-- ```{r} -->

<!-- #| fig-height: 5 -->

<!-- plotReason24 <- evicReason24 -->

<!-- evicClean_colors <- c( -->

<!--   "Holdover/lease expiration" = "#0047bd", -->

<!--   "Multiple Reasons" = "#a80092", -->

<!--   "Non-payment of rent" = "#042d33", -->

<!--   "Unknown" = "#ed018c", -->

<!--   "Violated lease" = "#008097" -->

<!--   ) -->

<!-- chart_container <- htmltools::div(style = "display: flex; flex-wrap: wrap; justify-content: center; overflow-y: hidden; gap: 5px")  -->

<!-- createLegendBox <- function(color, label) { -->

<!--   htmltools::div( -->

<!--     style = paste0("display: flex; align-items: center; margin-right: 15px;"), -->

<!--     htmltools::div(style = paste0("width: 20px; height: 20px; background-color: ", color, "; margin-right: 5px;")), -->

<!--     htmltools::span(label) -->

<!--   ) -->

<!-- } -->

<!-- for (court in unique(plotReason24$jpCourt)){ -->

<!--   court_data <- plotReason24 %>% filter(jpCourt == court)%>% -->

<!--     mutate(color = evicClean_colors[evicClean]) -->

<!--   hc<- highchart() %>% -->

<!--     hc_chart(type = "pie") %>% -->

<!--     hc_add_series( -->

<!--       data = court_data, -->

<!--       hcaes(x = evicClean, -->

<!--             y = round(perCases*100, 2), -->

<!--             color = color), -->

<!--       name = 'Percent', -->

<!--       type = "pie", -->

<!--       dataLabels = list(enabled = FALSE), -->

<!--       tooltip = list(pointFormat = "{point.name}: <b>{point.y:.2f}%</b>"), -->

<!--       showInLegend=TRUE, -->

<!--       colorByPoint = TRUE -->

<!--       ) %>% -->

<!--     hc_legend(enabled = FALSE)%>% -->

<!--     hc_title(text = paste(court), -->

<!--              style = list(fontSize = "15px", fontWeight = 'bold'))%>% -->

<!--     hc_size(height=60, width = 200)%>% -->

<!--     hc_add_theme(hc_cpal) -->

<!--     chart_container <- htmltools::tagAppendChild(chart_container,  -->

<!--                                                  htmltools::div(style = "width: 200px; height: 180px; margin: 5px;", hc))  -->

<!--     } -->

<!-- legend_container <- htmltools::div( -->

<!--   style = "display: flex; flex-wrap: wrap; justify-content: center; margin-top: 10px;" -->

<!-- ) -->

<!-- for (reason in names(evicClean_colors)) { -->

<!--   legend_container <- htmltools::tagAppendChild(legend_container,  -->

<!--                                                createLegendBox(evicClean_colors[reason], reason)) -->

<!-- } -->

<!-- chart_container <- htmltools::tagAppendChild(chart_container, legend_container) -->

<!-- chart_container -->

<!-- ``` -->

<!-- ## Fall '22 - Spring '23 -->

<!-- ```{r} -->

<!-- #| fig-height: 5 -->

<!-- plotReason23 <- evicReason23 -->

<!-- evicClean_colors <- c( -->

<!--   "Holdover/lease expiration" = "#0047bd", -->

<!--   "Multiple Reasons" = "#a80092", -->

<!--   "Non-payment of rent" = "#042d33", -->

<!--   "Unknown" = "#ed018c", -->

<!--   "Violated lease" = "#008097" -->

<!--   ) -->

<!-- chart_container <- htmltools::div(style = "display: flex;  -->

<!--                                   flex-wrap: wrap;  -->

<!--                                   justify-content: center;  -->

<!--                                   overflow-y: hidden;  -->

<!--                                   gap: 5px")  -->

<!-- createLegendBox <- function(color, label) { -->

<!--   htmltools::div( -->

<!--     style = paste0("display: flex; align-items: center; margin-right: 15px;"), -->

<!--     htmltools::div(style = paste0("width: 20px; height: 20px; background-color: ", color, "; margin-right: 5px;")), -->

<!--     htmltools::span(label) -->

<!--   ) -->

<!-- } -->

<!-- for (court in unique(plotReason23$jpCourt)){ -->

<!--   court_data <- plotReason23 %>% filter(jpCourt == court)%>% -->

<!--     mutate(color = evicClean_colors[evicClean]) -->

<!--   hc<- highchart() %>% -->

<!--     hc_chart(type = "pie") %>% -->

<!--     hc_add_series( -->

<!--       data = court_data, -->

<!--       hcaes(x = evicClean, -->

<!--             y = round(perCases*100, 2), -->

<!--             color = color), -->

<!--       name = 'Percent', -->

<!--       type = "pie", -->

<!--       dataLabels = list(enabled = FALSE), -->

<!--       tooltip = list(pointFormat = "{point.name}: <b>{point.y:.2f}%</b>"), -->

<!--       showInLegend=TRUE, -->

<!--       colorByPoint = TRUE -->

<!--       ) %>% -->

<!--     hc_legend(enabled = FALSE)%>% -->

<!--     hc_title(text = paste(court), -->

<!--              style = list(fontSize = "15px", fontWeight = 'bold'))%>% -->

<!--     hc_size(height=60, width = 200)%>% -->

<!--     hc_add_theme(hc_cpal) -->

<!--     chart_container <- htmltools::tagAppendChild(chart_container,  -->

<!--                                                  htmltools::div(style = "width: 200px; height: 180px; margin: 5px;", hc))  -->

<!--     } -->

<!-- legend_container <- htmltools::div( -->

<!--   style = "display: flex; flex-wrap: wrap; justify-content: center; margin-top: 10px;" -->

<!-- ) -->

<!-- for (reason in names(evicClean_colors)) { -->

<!--   legend_container <- htmltools::tagAppendChild(legend_container,  -->

<!--                                                createLegendBox(evicClean_colors[reason], reason)) -->

<!-- } -->

<!-- chart_container <- htmltools::tagAppendChild(chart_container, legend_container) -->

<!-- chart_container -->

<!-- ``` -->

<!-- ::: -->

<br><small>Cases are limited to those where the defendant appeared.</small>


```{r}
#| fig-height: 5

desired_order <- c(
  "November 2022", "December 2022", "January 2023", "February 2023", "March 2023", "April 2023",
  "May 2023", "June 2023", "July 2023", "August 2023", "September 2023",
  "October 2023", "November 2023", "December 2023", "January 2024", "February 2024",
  "March 2024", "April 2024"
)


```


::: shadecontent
{{< fa house-chimney size=lg title="Housing" >}} **Why this matters**:
Millions of dollars in federal rent relief have largely been expended at
this time, but eviction filing data illustrates the ongoing need for
financial assistance to renters who have fallen behind on rent.
:::


<br> **Among cases where the tenant appeared for their hearing, 51% of tenants had legal representation.**


<!-- ::: panel-tabset -->

<!-- ## Fall 2024 -->

```{r}
plotDefDeac <- defRepresentDeac%>%
  add_row(., tibble(jpCourt = "Court 3-1", legalRep = "Attorney present for tenant (Defendant)", count = 0, perRep = 0))%>%
  group_by(jpCourt, legalRep)%>%
  summarise(count = count, perRep = perRep)
  


#court_order <- c("Court 1-1", "Court 1-2", "Court 2-2", "Court 3-1", "Court 4-1", "Court 5-1", "Court 4-2", "Total" )

highchart()%>%
  hc_chart(type = "column") %>%
  hc_add_series(
    plotDefDeac,
    type = "column",
    mapping = hcaes(
      x = jpCourt,
      y = round(100*perRep, 2),  
      group = legalRep,
      color = ifelse(jpCourt == "Total", c('#ED683F','#4B1707', '#F1896A')[match(legalRep, unique(plotDefDeac$legalRep))], palette_cpal_main[match(legalRep, unique(plotDefDeac$legalRep))])
      ),
    dataLabels = list(enabled = TRUE, format = "{point.y:.0f}%", style = list(fontWeight = "bold")))%>%
  hc_plotOptions(column = list(borderWidth = 0)) %>%
  hc_xAxis(categories = unique(plotDefDeac$jpCourt), labels = list(enabled = TRUE)) %>%
  hc_yAxis(title = list(text = ""), labels = list(format = "{value}%"), max = 100) %>%
  hc_tooltip(
    useHTML = TRUE,
    pointFormat = paste0(
      "{series.name}: {point.y:.0f}%<br>",
      "Number of Cases: {point.count:,.0f}"
    )
  ) %>%
  hc_colors(palette_cpal_main)%>%
  hc_add_theme(hc_cpal)


```
<small>Cases are limited to those where the defendant appeared.</small>
<br><small>Values may not add to 100% due to rounding.</small>

<!-- ## Summer '23 - Spring '24 -->

<!-- ```{r} -->

<!-- plotDef24 <- defRepresent24%>% -->

<!--   add_row(., tibble(jpCourt = "Court 4-2", legalRep = "Attorney present for tenant (Defendant)", count = 0, perRep = 0))%>% -->

<!--   group_by(jpCourt, legalRep)%>% -->

<!--   summarise(count = count, perRep = perRep) -->

<!-- #court_order <- c("Court 1-1", "Court 1-2", "Court 2-2", "Court 3-1", "Court 4-1", "Court 5-1", "Court 4-2", "Total" ) -->

<!-- highchart()%>% -->

<!--   hc_chart(type = "column") %>% -->

<!--   hc_add_series( -->

<!--     plotDef24, -->

<!--     type = "column", -->

<!--     mapping = hcaes( -->

<!--       x = jpCourt, -->

<!--       y = round(100*perRep, 2),   -->

<!--       group = legalRep, -->

<!--       color = ifelse(jpCourt == "Total", c('#ED683F','#4B1707')[match(legalRep, unique(plotDef24$legalRep))], palette_cpal_main[match(legalRep, unique(plotDef24$legalRep))]) -->

<!--       ), -->

<!--     dataLabels = list(enabled = TRUE, format = "{point.y:.0f}%", style = list(fontWeight = "bold")))%>% -->

<!--   hc_plotOptions(column = list(borderWidth = 0)) %>% -->

<!--   hc_xAxis(categories = unique(plotDef24$jpCourt), labels = list(enabled = TRUE)) %>% -->

<!--   hc_yAxis(title = list(text = ""), labels = list(format = "{value}%"), max = 100) %>% -->

<!--   hc_tooltip(pointFormat = "{series.name} cases: {point.y:.0f}%") %>% -->

<!--   hc_colors(palette_cpal_main)%>% -->

<!--   hc_add_theme(hc_cpal) -->

<!-- ``` -->

<!-- ## Fall '22 - Spring '23 -->

<!-- ```{r} -->

<!-- plotDef23 <- defRepresent23%>% -->

<!--   #add_row(., tibble(jpCourt = "Court 4-2", legalRep = "Attorney present for tenant (Defendant)", count = 0, perRep = 0))%>% -->

<!--   group_by(jpCourt, legalRep)%>% -->

<!--   summarise(count = count, perRep = perRep) -->

<!-- #court_order <- c("Court 1-1", "Court 1-2", "Court 2-2", "Court 3-1", "Court 4-1", "Court 5-1", "Court 4-2", "Total" ) -->

<!-- highchart()%>% -->

<!--   hc_chart(type = "column") %>% -->

<!--   hc_add_series( -->

<!--     plotDef23, -->

<!--     type = "column", -->

<!--     mapping = hcaes( -->

<!--       x = jpCourt, -->

<!--       y = round(100*perRep, 2),   -->

<!--       group = legalRep, -->

<!--       color = ifelse(jpCourt == "Total", c('#ED683F','#4B1707')[match(legalRep, unique(plotDef23$legalRep))], palette_cpal_main[match(legalRep, unique(plotDef23$legalRep))]) -->

<!--       ), -->

<!--     dataLabels = list(enabled = TRUE, format = "{point.y:.0f}%", style = list(fontWeight = "bold")))%>% -->

<!--   hc_plotOptions(column = list(borderWidth = 0)) %>% -->

<!--   hc_xAxis(categories = unique(plotDef23$jpCourt), labels = list(enabled = TRUE)) %>% -->

<!--   hc_yAxis(title = list(text = ""), labels = list(format = "{value}%"), max = 100) %>% -->

<!--   hc_tooltip(pointFormat = "{series.name} cases: {point.y:.0f}%") %>% -->

<!--   hc_colors(palette_cpal_main)%>% -->

<!--   hc_add_theme(hc_cpal) -->

<!-- ``` -->

<!-- ::: -->

::: shadecontent
{{< fa house-chimney size=lg title="Housing" >}} **Why this matters**:
Unlike criminal cases, defendants in civil cases generally do not have a
right to counsel and are not assigned a public defender to represent
them in court. Renters with legal representation in eviction hearings
are much more likely to win their case and remain housed. Attorneys may
also help renters negotiate terms with their landlords, keep eviction
judgments off their records, and navigate other housing supports, like
rent relief.
:::

<br> **A written Notice to Vacate is the first legal step to initiate an eviction and was discussed by the Justice of the Peace in 24% of observed hearings.**


```{r}
#| fig-height: 5

plotntvDeac <- ntvDeac %>%
  filter(noticeVacate == "Yes")
  

highchart()%>%
  hc_chart(type = 'column')%>%
    hc_add_series(
    plotntvDeac,
    type = "column",
    name = 'Percentage of Cases with Written Notice Present',
    mapping = hcaes(
      x = jpCourt,
      y = round(100*perntv, 2),
      color = ifelse(jpCourt == "Total", '#ED683F', '#008097')
      ),
    dataLabels = list(enabled = TRUE, format = "{point.y:.0f}%", style = list(fontWeight = "bold")),
    showInLegend = FALSE,
    colorByPoint = TRUE)%>%
  hc_plotOptions(column = list(borderWidth = 0)) %>%
  hc_xAxis(categories = unique(plotntvDeac$jpCourt), labels = list(enabled = TRUE)) %>%
  hc_yAxis(title = list(text = ""), labels = list(format = "{value}%"), max = 100) %>%
  hc_tooltip(
    useHTML = TRUE,
    pointFormat = paste0(
      "Percentage of Cases With Discussed NTV: {point.y:.0f}%<br>",
      "Number of Cases: {point.count:,.0f}"
    )
  ) %>%
  #hc_colors(palette_cpal_main)%>%
  hc_add_theme(hc_cpal)

```
<small>Cases are limited to those where the defendant appeared.</small>

::: shadecontent
{{< fa house-chimney size=lg title="Housing" >}} **Why this matters**:
Unless a lease agreement states otherwise, Texas law requires a landlord
to give a renter at least three days to move out, and the landlord must
provide this notice (called a Notice to Vacate) in writing. An eviction
cannot be filed in court before providing a Notice to Vacate. If a
Notice to Vacate was not properly administered, then the renter may have
recourse to have the case dismissed. If the Notice to Vacate is not
confirmed during an eviction hearing, then there may be a missed
opportunity to dismiss the eviction suit.
:::

<!-- ## Across all cases in the Summer '23 - Spring '24 Observation Cycle, the average length of time for each hearing was less than 4 minutes. -->

<!-- ::: {.panel-tabset} -->

<!-- ## Fall 2024 -->

<!-- ```{r} -->

<!-- hearingtimeDeac %>% -->

<!--   transmute('JP Court' = jpCourt, -->

<!--             'Cases Observed' = scales::number(CasesObs, big.mark = ","), -->

<!--             'Average Case Length' = paste(round(AvgCaseLength/60, digits = 1), "Minutes")) %>% -->

<!--   datatable(options = list(paging = FALSE, -->

<!--                            searching = FALSE, -->

<!--                            info = FALSE -->

<!--                            ), -->

<!--             rownames = FALSE) %>% -->

<!--   formatStyle(columns = colnames(.), fontWeight = 'bold', `text-align` = 'left') %>% -->

<!--   formatStyle(columns = colnames(.), fontFamily = "Poppins") -->

<!-- ``` -->

<!-- ## Summer '23 - Spring '24 -->

<!-- ```{r, Average Hearing Time} -->

<!-- hearingtime24 %>% -->

<!--   transmute('JP Court' = jpCourt, -->

<!--             'Cases Observed' = scales::number(CasesObs, big.mark = ","), -->

<!--             'Average Case Length' = paste(round(AvgCaseLength/60, digits = 1), "Minutes")) %>% -->

<!--   datatable(options = list(paging = FALSE, -->

<!--                            searching = FALSE, -->

<!--                            info = FALSE -->

<!--                            ), -->

<!--             rownames = FALSE) %>% -->

<!--   formatStyle(columns = colnames(.), fontWeight = 'bold', `text-align` = 'left') %>% -->

<!--   formatStyle(columns = colnames(.), fontFamily = "Poppins") -->

<!-- ``` -->

<!-- ## Fall '22 - Spring '23 -->

<!-- ```{r} -->

<!-- hearingtime23 %>% -->

<!--   transmute('JP Court' = jpCourt, -->

<!--             'Cases Observed' = scales::number(CasesObs, big.mark = ","), -->

<!--             'Average Case Length' = paste(round(AvgCaseLength, digits = 1), "Minutes")) %>% -->

<!--   datatable(options = list(paging = FALSE, -->

<!--                            searching = FALSE, -->

<!--                            info = FALSE -->

<!--                            ), -->

<!--             rownames = FALSE) %>% -->

<!--   formatStyle(columns = colnames(.), fontWeight = 'bold', `text-align` = 'left') %>% -->

<!--   formatStyle(columns = colnames(.), fontFamily = "Poppins") -->

<!-- ``` -->

<!-- ::: -->

<!-- ::: column-margin -->

<!-- Average hearing length calculated by (1) counting the number of cases -->

<!-- observed in each docket, including default judgments, (2) calculating -->

<!-- the total time of the docket (end time - start time), (3) calculating -->

<!-- the average length of each hearing by dividing docket time by number of -->

<!-- cases observed, and then (4) calculating a weighted average across all -->

<!-- observed dockets. Because not all cases in a single docket may have been -->

<!-- observed, average length of time here is likely conservative – i.e., -->

<!-- average length of time per hearing is likely an overestimate. -->

<!-- ::: -->

<br>

## Across all observed cases, the judge ruled in favor of the landlord in 55% of cases and in favor of the tenant in 11% of cases.

<!-- ::: panel-tabset -->

<!-- ## Fall 2024 -->

```{r}
#| fig-height: 4
court_order <- c("Court 1-1", "Court 1-2", "Court 2-1", "Court 2-2","Court 3-1", "Court 3-2", "Court 5-1","Total")
plotOutcomeDeac <- caseOutcomeDeac
outcomeParty_colors <- c(
  "Abated" = "#0047bd",  
  "Dismissed" = "#a80092", 
  "Ruled in Favor of Landlord" = "#042d33",   
  "Other" = "#ed018c", 
  "Ruled in Favor of Tenant" = "#008097",
  'Unknown'='#ed683f'
)
chart_container <- htmltools::div(style = "display: flex; flex-wrap: wrap; justify-content: center; overflow-y: hidden; gap: 5px") 

createLegendBox <- function(color, label) {
  htmltools::div(
    style = paste0("display: flex; align-items: center; margin-right: 15px;"),
    htmltools::div(style = paste0("width: 20px; height: 20px; background-color: ", color, "; margin-right: 5px;")),
    htmltools::span(label)
  )
}
for (court in court_order) {
  court_data <- plotOutcomeDeac %>% filter(jpCourt == court)%>% 
    mutate(color = outcomeParty_colors[outcomeParty])
    
    hc<- highchart() %>%
      hc_chart(type = "pie") %>% 
      hc_add_series(
        data = court_data,
        hcaes(x = outcomeParty, 
              y = round(perOutcome*100, 2),
              color = color), 
        name = 'Percent',
        type = "pie",
        dataLabels = list(enabled = FALSE),
        tooltip = list(
        pointFormat = paste0(
          "{point.name}: <b>{point.y:.2f}%</b><br>",
          "Number of Cases: {point.count:,.0f}"
        )),
        showInLegend=FALSE,
        colorByPoint = TRUE
        ) %>%
      hc_legend(visible = FALSE)%>%
      hc_title(text = paste(court),
             style = list(fontSize = "15px", fontWeight = 'bold'))%>%
    hc_add_theme(hc_cpal)%>%
    hc_size(height=200, width = 200)

    chart_container <- htmltools::tagAppendChild(chart_container, 
                                                 htmltools::div(style = "width: 200px; height: 180px; margin: 5px;", hc)) 
    }
# 
legend_container <- htmltools::div(
  style = "display: flex; flex-wrap: wrap; justify-content: center; margin-top: 10px;"
)

# Add Legend Boxes to Legend Container
for (reason in names(outcomeParty_colors)) {
  legend_container <- htmltools::tagAppendChild(legend_container,
                                               createLegendBox(outcomeParty_colors[reason], reason))
}

# Append Legend Container to Main Container
chart_container <- htmltools::tagAppendChild(chart_container, legend_container)

# Display the Final Chart Container
chart_container

```

<!-- ## Summer '23 - Spring '24 -->

<!-- ```{r, eviction outcome} -->

<!-- #| fig-height: 4 -->

<!-- court_order <- c("Court 1-1", "Court 1-2",  -->

<!--                  #"Court 2-2", -->

<!--                  "Court 3-1","Court 4-1", "Court 4-2", "Court 5-1", "Total") -->

<!-- plotOutcome <- caseOutcome24 -->

<!-- outcomeParty_colors <- c( -->

<!--   "Abated" = "#0047bd",   -->

<!--   "Dismissed" = "#a80092",  -->

<!--   "Ruled in Favor of Landlord" = "#042d33",    -->

<!--   "Other" = "#ed018c",  -->

<!--   "Ruled in Favor of Tenant" = "#008097", -->

<!--   'Unknown'='#ed683f' -->

<!-- ) -->

<!-- chart_container <- htmltools::div(style = "display: flex; flex-wrap: wrap; justify-content: center; overflow-y: hidden; gap: 5px")  -->

<!-- createLegendBox <- function(color, label) { -->

<!--   htmltools::div( -->

<!--     style = paste0("display: flex; align-items: center; margin-right: 15px;"), -->

<!--     htmltools::div(style = paste0("width: 20px; height: 20px; background-color: ", color, "; margin-right: 5px;")), -->

<!--     htmltools::span(label) -->

<!--   ) -->

<!-- } -->

<!-- for (court in court_order) { -->

<!--   court_data <- plotOutcome %>% filter(jpCourt == court)%>%  -->

<!--     mutate(color = outcomeParty_colors[outcomeParty]) -->

<!--     hc<- highchart() %>% -->

<!--       hc_chart(type = "pie") %>%  -->

<!--       hc_add_series( -->

<!--         data = court_data, -->

<!--         hcaes(x = outcomeParty,  -->

<!--               y = round(perOutcome*100, 2), -->

<!--               color = color),  -->

<!--         name = 'Percent', -->

<!--         type = "pie", -->

<!--         dataLabels = list(enabled = FALSE), -->

<!--         tooltip = list(pointFormat = "{point.name}: <b>{point.y:.2f}%</b>"), -->

<!--         showInLegend=FALSE, -->

<!--         colorByPoint = TRUE -->

<!--         ) %>% -->

<!--       hc_legend(visible = FALSE)%>% -->

<!--       hc_title(text = paste(court), -->

<!--              style = list(fontSize = "15px", fontWeight = 'bold'))%>% -->

<!--     hc_add_theme(hc_cpal)%>% -->

<!--     hc_size(height=60, width = 200) -->

<!--     chart_container <- htmltools::tagAppendChild(chart_container,  -->

<!--                                                  htmltools::div(style = "width: 200px; height: 180px; margin: 5px;", hc))  -->

<!--     } -->

<!-- #  -->

<!-- legend_container <- htmltools::div( -->

<!--   style = "display: flex; flex-wrap: wrap; justify-content: center; margin-top: 10px;" -->

<!-- ) -->

<!-- # Add Legend Boxes to Legend Container -->

<!-- for (reason in names(outcomeParty_colors)) { -->

<!--   legend_container <- htmltools::tagAppendChild(legend_container, -->

<!--                                                createLegendBox(outcomeParty_colors[reason], reason)) -->

<!-- } -->

<!-- # Append Legend Container to Main Container -->

<!-- chart_container <- htmltools::tagAppendChild(chart_container, legend_container) -->

<!-- # Display the Final Chart Container -->

<!-- chart_container -->

<!-- ``` -->

<!-- ## Fall '22 - Spring '23 -->

<!-- ```{r} -->

<!-- #| fig-height: 5 -->

<!-- court_order <- c("Court 1-1", "Court 1-2",  -->

<!--                  #"Court 2-2", -->

<!--                  "Court 3-1","Court 4-1", "Court 5-1", "Total") -->

<!-- plotOutcome23 <- caseOutcome23  -->

<!-- outcomeParty_colors <- c( -->

<!--   "Abated" = "#0047bd",   -->

<!--   "Dismissed" = "#a80092",  -->

<!--   "Ruled in Favor of Landlord" = "#042d33",    -->

<!--   "Other" = "#ed018c",  -->

<!--   "Ruled in Favor of Tenant" = "#008097", -->

<!--   'Unknown'='#ed683f' -->

<!-- ) -->

<!-- chart_container <- htmltools::div(style = "display: flex; flex-wrap: wrap; justify-content: center; overflow-y: hidden; gap: 5px")  -->

<!-- createLegendBox <- function(color, label) { -->

<!--   htmltools::div( -->

<!--     style = paste0("display: flex; align-items: center; margin-right: 15px;"), -->

<!--     htmltools::div(style = paste0("width: 20px; height: 20px; background-color: ", color, "; margin-right: 5px;")), -->

<!--     htmltools::span(label) -->

<!--   ) -->

<!-- } -->

<!-- for (court in court_order) { -->

<!--   court_data <- plotOutcome23 %>% filter(jpCourt == court)%>%  -->

<!--     mutate(color = outcomeParty_colors[outcomeParty]) -->

<!--     hc<- highchart() %>% -->

<!--       hc_chart(type = "pie") %>%  -->

<!--       hc_add_series( -->

<!--         data = court_data, -->

<!--         hcaes(x = outcomeParty,  -->

<!--               y = round(perOutcome*100, 2), -->

<!--               color = color),  -->

<!--         name = 'Percent', -->

<!--         type = "pie", -->

<!--         dataLabels = list(enabled = FALSE), -->

<!--         tooltip = list(pointFormat = "{point.name}: <b>{point.y:.2f}%</b>"), -->

<!--         showInLegend=FALSE, -->

<!--         colorByPoint = TRUE -->

<!--         ) %>% -->

<!--       hc_legend(visible = FALSE)%>% -->

<!--       hc_title(text = paste(court), -->

<!--              style = list(fontSize = "15px", fontWeight = 'bold'))%>% -->

<!--     hc_add_theme(hc_cpal)%>% -->

<!--     hc_size(height=60, width = 200) -->

<!--     chart_container <- htmltools::tagAppendChild(chart_container,  -->

<!--                                                  htmltools::div(style = "width: 200px; height: 180px; margin: 5px;", hc))  -->

<!--     } -->

<!-- #  -->

<!-- legend_container <- htmltools::div( -->

<!--   style = "display: flex; flex-wrap: wrap; justify-content: center; margin-top: 10px;" -->

<!-- ) -->

<!-- # Add Legend Boxes to Legend Container -->

<!-- for (reason in names(outcomeParty_colors)) { -->

<!--   legend_container <- htmltools::tagAppendChild(legend_container, -->

<!--                                                createLegendBox(outcomeParty_colors[reason], reason)) -->

<!-- } -->

<!-- # Append Legend Container to Main Container -->

<!-- chart_container <- htmltools::tagAppendChild(chart_container, legend_container) -->

<!-- # Display the Final Chart Container -->

<!-- chart_container -->

<!-- ``` -->

<!-- ::: -->

<br>

::: shadecontent
{{< fa house-chimney size=lg title="Housing" >}} **Why this matters**:
Evicted low-income renters face a host of consequences: eviction
increases the risk of homelessness, elevates long-term residential
instability, and increases emergency room use. Eviction is also a matter
of public record and can appear on public consumer reports (even if a
renter won an eviction case), so evicted renters have a harder time
finding a new place to live. Rent or court fees may also go to
collections, negatively impacting a renter’s credit score.
:::

## However, appearing in court and having legal representation matters for outcomes. When tenants did not appear for their hearings, cases were decided in favor of the landlord 79% of the time; when tenants did appear, cases were decided in favor of the landlord 52% of the time.

**Case outcomes when tenant/defendant appeared versus when
tenant/defendant did not appear (across all observations):**



<!-- ::: panel-tabset -->

<!-- ## Fall 2024 -->

```{r}
#| fig-height: 4

plotOutApDeac <- outcomeAppDeac %>%
  # filter(!is.na(outcomeParty)) %>%
  mutate(outcomeParty = factor(outcomeParty, levels = c("Ruled in Favor of Landlord", "Ruled in Favor of Tenant", "Abated", "Dismissed", "Other", "Unknown")),
         defAppear = ifelse(defAppear == "Yes", "Tenant appeared", "Tenant did not appear"))# %>%
highchart() %>%
  hc_xAxis(categories = unique(plotOutApDeac$defAppear)) %>%
  hc_yAxis(visible=FALSE) %>%
  hc_add_series(data = plotOutApDeac, 
                type = "bar", 
                hcaes(x = defAppear, 
                      y = round(100*perOutcome,2), 
                      group = outcomeParty),
                tooltip = list(pointFormat = "{series.name}: <b>{point.y:.2f}%</b><br>Number of Cases: <b>{point.count}</b>")) %>%
  hc_chart(type = "bar") %>%
  hc_plotOptions(bar = list(stacking = "normal"))%>%
  hc_colors(palette_cpal_main)%>%
  hc_add_theme(hc_cpal)


```
<small>Cases marked as "Unknown" for tenant appearance are excluded from this
chart.</small>
<!-- ## Summer '23 - Spring '24 -->

<!-- ```{r, outcomes with appearance} -->

<!-- #| fig-height: 4 -->

<!-- plotOutAp <- outcomeApp24 %>% -->

<!--   mutate(outcomeParty = factor(outcomeParty, levels = c("Ruled in Favor of Landlord", "Ruled in Favor of Tenant", "Abated", "Dismissed", "Other", "Unknown")), -->

<!--          defAppear = ifelse(defAppear == "Yes", "Tenant appeared", "Tenant did not appear"))# %>% -->

<!-- highchart() %>% -->

<!--   hc_xAxis(categories = unique(plotOutAp$defAppear)) %>% -->

<!--   hc_yAxis(visible=FALSE) %>% -->

<!--   hc_add_series(data = plotOutAp,  -->

<!--                 type = "bar",  -->

<!--                 hcaes(x = defAppear,  -->

<!--                       y = round(100*perOutcome,2),  -->

<!--                       group = outcomeParty), -->

<!--                 tooltip = list(pointFormat = "{series.name}: <b>{point.y:.2f}%</b>")) %>% -->

<!--   hc_chart(type = "bar") %>% -->

<!--   hc_plotOptions(bar = list(stacking = "normal"))%>% -->

<!--   hc_colors(palette_cpal_main)%>% -->

<!--     hc_add_theme(hc_cpal) -->

<!-- ``` -->

<!-- ## Fall '22 - Spring '23 -->

<!-- ```{r} -->

<!-- #| fig-height: 4 -->

<!-- plotOutAp <- outcomeApp23 %>% -->

<!--   mutate(outcomeParty = factor(outcomeParty, levels = c("Ruled in Favor of Landlord", "Ruled in Favor of Tenant", "Abated", "Dismissed", "Other", "Unknown")), -->

<!--          defAppear = ifelse(defAppear == "Yes", "Tenant appeared", "Tenant did not appear"))# %>% -->

<!-- highchart() %>% -->

<!--   hc_xAxis(categories = unique(plotOutAp$defAppear)) %>% -->

<!--   hc_yAxis(visible=FALSE) %>% -->

<!--   hc_add_series(data = plotOutAp,  -->

<!--                 type = "bar",  -->

<!--                 hcaes(x = defAppear,  -->

<!--                       y = round(100*perOutcome,2),  -->

<!--                       group = outcomeParty), -->

<!--                 tooltip = list(pointFormat = "{series.name}: <b>{point.y:.2f}%</b>")) %>% -->

<!--   hc_chart(type = "bar") %>% -->

<!--   hc_plotOptions(bar = list(stacking = "normal"))%>% -->

<!--   hc_colors(palette_cpal_main)%>% -->

<!--     hc_add_theme(hc_cpal) -->

<!-- ``` -->

<!-- ::: -->

## When tenants had legal representation, cases were decided in favor of the landlord 26% of the time.

**Case outcomes when tenant/defendant had legal representation versus
when tenant/defendant did not have legal representation (across all
observations).**

<!-- ::: panel-tabset -->

<!-- ## Fall 2024 -->

```{r}
#| fig-height: 4

plotRepDeac <- outcomeRepDeac %>%
  mutate(defRep = ifelse(str_detect(defRep, "Yes"), "With Legal Representation", "Without Legal Representation"),
         outcomeParty = case_when(is.na(outcomeParty) ~ "Unknown",
                                  TRUE ~ outcomeParty),
         outcomeParty = factor(outcomeParty, levels = c("Ruled in Favor of Landlord", "Ruled in Favor of Tenant", "Abated", "Dismissed", "Other", "Unknown")))

highchart() %>%
  hc_xAxis(categories = unique(plotRepDeac$defRep)) %>%
  hc_yAxis(visible=FALSE) %>%
  hc_add_series(data = plotRepDeac, 
                type = "bar", 
                hcaes(x = defRep, 
                      y = round(100*perOutcome,2), 
                      group = outcomeParty),
                tooltip = list(pointFormat = "{series.name}: <b>{point.y:.2f}%</b><br>Number of Cases: <b>{point.count}</b>")) %>%
  hc_chart(type = "bar") %>%
  hc_plotOptions(bar = list(stacking = "normal"))%>%
  hc_colors(palette_cpal_main)%>%
    hc_add_theme(hc_cpal)

```
<small>Cases are limited to those where defendant representation was captured by our observers</small>
<!-- ## Summer '23 - Spring '24 -->

<!-- ```{r, outcomes with representation} -->

<!-- #| fig-height: 4 -->

<!-- plotRep <- outcomeRep24 %>% -->

<!--     mutate(outcomeParty = factor(outcomeParty, levels = c("Ruled in Favor of Landlord", "Ruled in Favor of Tenant", "Abated", "Dismissed", "Other", "Unknown"))) %>% -->

<!--   mutate(defRep = ifelse(str_detect(defRep, "Yes"), "With Legal Representation", "Without Legal Representation")) #%>% -->

<!-- highchart() %>% -->

<!--   hc_xAxis(categories = unique(plotRep$defRep)) %>% -->

<!--   hc_yAxis(visible=FALSE) %>% -->

<!--   hc_add_series(data = plotRep,  -->

<!--                 type = "bar",  -->

<!--                 hcaes(x = defRep,  -->

<!--                       y = round(100*perOutcome,2),  -->

<!--                       group = outcomeParty), -->

<!--                 tooltip = list(pointFormat = "{series.name}: <b>{point.y:.2f}%</b>")) %>% -->

<!--   hc_chart(type = "bar") %>% -->

<!--   hc_plotOptions(bar = list(stacking = "normal"))%>% -->

<!--   hc_colors(palette_cpal_main)%>% -->

<!--     hc_add_theme(hc_cpal) -->

<!-- # evicReasonTime <- courtobs %>% -->

<!-- #   filter(!is.na(jpCourt)) %>% -->

<!-- #   mutate(evicClean = ifelse(str_detect(evicReason, ","), "Multiple Reasons", evicReason), -->

<!-- #          observationMonth = ymd(observationDate), "%B %Y") %>% -->

<!-- #   group_by(jpCourt, evicClean, observationMonth) %>% -->

<!-- #   summarize(count = n()) %>% -->

<!-- #   mutate(perCases = count/sum(count)) %>% -->

<!-- #   ungroup(.) %>% -->

<!-- #   arrange(observationMonth) %>%  # Sort chronologically -->

<!--   #mutate(observationMonth = format(observationMonth, "%B %Y")) -->

<!--   #rbind(., totReason) -->

<!-- # highchart()%>% -->

<!-- #   hc_add_series(data = evicReasonTime,  -->

<!-- #                 type = 'line',  -->

<!-- #                 hcaes(x = observationMonth,  -->

<!-- #                       y = count,  -->

<!-- #                       group = evicClean))%>% -->

<!-- #   hc_xAxis(type = 'category', -->

<!-- #            categories = unique(evicReasonTime$observationMonth)) %>%  -->

<!-- #   hc_colors(palette_cpal_main)#%>% -->

<!-- #   #hc_title(text='Payors for Clinic Visits Over Time') -->

<!-- ``` -->

<!-- ## Fall '22 - Spring '23 -->

<!-- ```{r} -->

<!-- #| fig-height: 4 -->

<!-- plotRep23 <- outcomeRep23 %>% -->

<!--     mutate(outcomeParty = factor(outcomeParty, levels = c("Ruled in Favor of Landlord", "Ruled in Favor of Tenant", "Abated", "Dismissed", "Other", "Unknown"))) %>% -->

<!--   mutate(defRep = ifelse(str_detect(defRep, "Yes"), "With Legal Representation", "Without Legal Representation")) #%>% -->

<!-- highchart() %>% -->

<!--   hc_xAxis(categories = unique(plotRep23$defRep)) %>% -->

<!--   hc_yAxis(visible=FALSE) %>% -->

<!--   hc_add_series(data = plotRep23,  -->

<!--                 type = "bar",  -->

<!--                 hcaes(x = defRep,  -->

<!--                       y = round(100*perOutcome,2),  -->

<!--                       group = outcomeParty), -->

<!--                 tooltip = list(pointFormat = "{series.name}: <b>{point.y:.2f}%</b>")) %>% -->

<!--   hc_chart(type = "bar") %>% -->

<!--   hc_plotOptions(bar = list(stacking = "normal"))%>% -->

<!--   hc_colors(palette_cpal_main)%>% -->

<!--     hc_add_theme(hc_cpal) -->

<!-- ``` -->

<!-- ::: -->

# About CPAL

CPAL is a Dallas-based nonprofit organization committed to cutting child
poverty in Dallas, Texas in half within a generation by (1) generating
relevant data insights to break big problems into small, actionable
ones, (2) facilitating cross-sector, collective action based on data
insights, and (3) applying principles of human-centered design to solve
problems in partnership with communities. One of CPAL’s five areas of
focus is housing, and CPAL’s long-term aspiration is to ensure all
Dallas families have access to stable housing without worry of an
involuntary move.
